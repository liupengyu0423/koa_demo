hello hello world
日志级别
日志分为 NONE，DEBUG，INFO，WARN 和 ERROR 5 个级别。

日志打印到文件中的同时，为了方便开发，也会同时打印到终端中。

 文件日志级别
默认只会输出 INFO 及以上（WARN 和 ERROR）的日志到文件中。

可通过如下方式配置输出到文件日志的级别：

打印所有级别日志到文件中：

// config/config.${env}.js
exports.logger = {
  level: 'DEBUG',
};
关闭所有打印到文件的日志：

// config/config.${env}.js
exports.logger = {
  level: 'NONE',
};
 生产环境打印 debug 日志
为了避免一些插件的调试日志在生产环境打印导致性能问题，生产环境默认禁止打印 DEBUG 级别的日志，如果确实有需求在生产环境打印 DEBUG 日志进行调试，需要打开 allowDebugAtProd 配置项。

// config/config.prod.js
exports.logger = {
  level: 'DEBUG',
  allowDebugAtProd: true,
};
 终端日志级别
默认只会输出 INFO 及以上（WARN 和 ERROR）的日志到终端中。

logger.consoleLevel: 输出到终端日志的级别，默认为 INFO
可通过如下方式配置输出到终端日志的级别：

打印所有级别日志到终端：

// config/config.${env}.js
exports.logger = {
  consoleLevel: 'DEBUG',
};
关闭所有打印到终端的日志：

// config/config.${env}.js
exports.logger = {
  consoleLevel: 'NONE',
};
 自定义日志
 增加自定义日志
一般应用无需配置自定义日志，因为日志打太多或太分散都会导致关注度分散，反而难以管理和难以排查发现问题。

如果实在有需求可以如下配置：

// config/config.${env}.js
const path = require('path');

module.exports = appInfo => {
  return {
    customLogger: {
      xxLogger: {
        file: path.join(appInfo.root, 'logs/xx.log'),
      },
    },
  };
};
可通过 app.getLogger('xxLogger') / ctx.getLogger('xxLogger') 获取，最终的打印结果和 coreLogger 类似。

 高级自定义日志
日志默认是打印到日志文件中，当本地开发时同时会打印到终端。 但是，有时候我们会有需求把日志打印到其他媒介上，这时候我们就需要自定义日志的 transport。

Transport 是一种传输通道，一个 logger 可包含多个传输通道。比如默认的 logger 就有 fileTransport 和 consoleTransport 两个通道， 分别负责打印到文件和终端。

举个例子，我们不仅需要把错误日志打印到 common-error.log，还需要上报给第三方服务。

首先我们定义一个日志的 transport，代表第三方日志服务。

const util = require('util');
const Transport = require('egg-logger').Transport;

class RemoteErrorTransport extends Transport {

  // 定义 log 方法，在此方法中把日志上报给远端服务
  log(level, args) {
    let log;
    if (args[0] instanceof Error) {
      const err = args[0];
      log = util.format('%s: %s\n%s\npid: %s\n', err.name, err.message, err.stack, process.pid);
    } else {
      log = util.format(...args);
    }

    this.options.app.curl('http://url/to/remote/error/log/service/logs', {
      data: log,
      method: 'POST',
    }).catch(console.error);
  }
}

// app.js 中给 errorLogger 添加 transport，这样每条日志就会同时打印到这个 transport 了
app.getLogger('errorLogger').set('remote', new RemoteErrorTransport({ level: 'ERROR', app }));
上面的例子比较简单，实际情况中我们需要考虑性能，很可能采取先打印到内存，再定时上传的策略，以提高性能。

 日志切割
企业级日志一个最常见的需求之一是对日志进行自动切割，以方便管理。框架对日志切割的支持由 egg-logrotator 插件提供。

 按天切割
这是框架的默认日志切割方式，在每日 00:00 按照 .log.YYYY-MM-DD 文件名进行切割。

以 appLog 为例，当前写入的日志为 example-app-web.log，当凌晨 00:00 时，会对日志进行切割，把过去一天的日志按 example-app-web.log.YYYY-MM-DD 的形式切割为单独的文件。

 按照文件大小切割
我们也可以按照文件大小进行切割。例如，当文件超过 2G 时进行切割。

例如，我们需要把 egg-web.log 按照大小进行切割：

// config/config.${env}.js
const path = require('path');

module.exports = appInfo => {
  return {
    logrotator: {
      filesRotateBySize: [
        path.join(appInfo.root, 'logs', appInfo.name, 'egg-web.log'),
      ],
      maxFileSize: 2 * 1024 * 1024 * 1024,
    },
  };
};
添加到 filesRotateBySize 的日志文件不再按天进行切割。

 按照小时切割
我们也可以选择按照小时进行切割，这和默认的按天切割非常类似，只是时间缩短到每小时。

例如，我们需要把 common-error.log 按照小时进行切割：

// config/config.${env}.js
const path = require('path');

module.exports = appInfo => {
  return {
    logrotator: {
      filesRotateByHour: [
        path.join(appInfo.root, 'logs', appInfo.name, 'common-error.log'),
      ],
    },
  };